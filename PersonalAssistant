import tkinter as tk
from tkinter import scrolledtext
import pyttsx3
import speech_recognition as sr
import requests
import wikipedia
import os
import random
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import pyjokes
from datetime import datetime
import time
import webbrowser
def speak(text):
    engine = pyttsx3.init()
    engine.setProperty('rate', 150)
    engine.setProperty('volume', 0.9)
    engine.say(text)
    engine.runAndWait()
def get_time():
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    speak(f"The current time is {current_time}")
    return f"The current time is {current_time}"

def get_weather(city):
    API_KEY = 'your_api_key'  # Replace with your OpenWeatherMap API key
    BASE_URL = 'http://api.openweathermap.org/data/2.5/weather'
    params = {'q': city, 'appid': API_KEY, 'units': 'metric'}
    response = requests.get(BASE_URL, params=params)
    data = response.json()
    if data['cod'] == 200:
        weather = data['weather'][0]['description']
        temp = data['main']['temp']
        result = f"The weather in {city} is {weather} with a temperature of {temp}Â°C"
        speak(result)
        return result
    else:
        result = "City not found."
        speak(result)
        return result

def search_wikipedia(query):
    try:
        summary = wikipedia.summary(query, sentences=2)
        result = f"According to Wikipedia, {summary}"
        speak(result)
        return result
    except wikipedia.exceptions.DisambiguationError as e:
        result = f"Can you please be more specific? There are multiple results for {query}"
        speak(result)
        return result
    except wikipedia.exceptions.PageError:
        result = f"Sorry, I couldn't find anything on Wikipedia for {query}"
        speak(result)
        return result

def play_music(directory):
    songs = os.listdir(directory)
    song = random.choice(songs)
    os.system(f"start {os.path.join(directory, song)}")
    result = f"Playing {song}"
    speak(result)
    return result

def open_website(url):
    webbrowser.open(url)
    result = f"Opening {url}"
    speak(result)
    return result

def tell_joke():
    joke = pyjokes.get_joke()
    speak(joke)
    return joke

def set_reminder(reminder_text, reminder_time):
    speak(f"Setting a reminder for {reminder_time} seconds.")
    time.sleep(reminder_time)
    speak(f"Reminder: {reminder_text}")
    return f"Reminder set for {reminder_time} seconds."

def send_email(to_email, subject, message, from_email="your_email@gmail.com", password="your_password"):
    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = to_email
    msg['Subject'] = subject
    msg.attach(MIMEText(message, 'plain'))

    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(from_email, password)
        text = msg.as_string()
        server.sendmail(from_email, to_email, text)
        server.quit()
        result = "Email has been sent successfully!"
        speak(result)
        return result
    except Exception as e:
        result = f"Failed to send email. Error: {e}"
        speak(result)
        return result
class PersonalAssistantApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Personal Assistant")
        self.root.geometry("600x400")

        self.label = tk.Label(root, text="Enter your command:")
        self.label.pack(pady=10)

        self.entry = tk.Entry(root, width=50)
        self.entry.pack(pady=10)

        self.submit_button = tk.Button(root, text="Submit", command=self.handle_command)
        self.submit_button.pack(pady=10)

        self.text_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=70, height=15)
        self.text_area.pack(pady=10)

    def handle_command(self):
        command = self.entry.get().lower()
        self.text_area.insert(tk.END, f"\nYou: {command}\n")
        self.entry.delete(0, tk.END)

        if 'time' in command:
            result = get_time()
        elif 'reminder' in command:
            self.text_area.insert(tk.END, "What should I remind you about?\n")
            self.root.update()
            reminder_text = self.entry.get()
            self.entry.delete(0, tk.END)
            self.text_area.insert(tk.END, "In how many seconds?\n")
            self.root.update()
            reminder_time = int(self.entry.get())
            self.entry.delete(0, tk.END)
            result = set_reminder(reminder_text, reminder_time)
        elif 'weather' in command:
            self.text_area.insert(tk.END, "Which city's weather would you like to know?\n")
            self.root.update()
            city = self.entry.get()
            self.entry.delete(0, tk.END)
            result = get_weather(city)
        elif 'wikipedia' in command:
            self.text_area.insert(tk.END, "What should I search on Wikipedia?\n")
            self.root.update()
            query = self.entry.get()
            self.entry.delete(0, tk.END)
            result = search_wikipedia(query)
        elif 'play music' in command:
            music_directory = "path_to_your_music_directory"
            result = play_music(music_directory)
        elif 'open website' in command:
            self.text_area.insert(tk.END, "Which website should I open?\n")
            self.root.update()
            url = self.entry.get()
            self.entry.delete(0, tk.END)
            result = open_website(url)
        elif 'send email' in command:
            self.text_area.insert(tk.END, "To whom should I send the email?\n")
            self.root.update()
            to_email = self.entry.get()
            self.entry.delete(0, tk.END)
            self.text_area.insert(tk.END, "What is the subject?\n")
            self.root.update()
            subject = self.entry.get()
            self.entry.delete(0, tk.END)
            self.text_area.insert(tk.END, "What should I say?\n")
            self.root.update()
            message = self.entry.get()
            self.entry.delete(0, tk.END)
            result = send_email(to_email, subject, message)
        elif 'joke' in command:
            result = tell_joke()
        elif 'stop' in command or 'exit' in command or 'bye' in command:
            speak("Goodbye!")
            self.root.quit()
        else:
            result = "Sorry, I can't perform that task."

        self.text_area.insert(tk.END, f"Assistant: {result}\n")
        self.text_area.yview(tk.END)


if __name__ == "__main__":
    root = tk.Tk()
    app = PersonalAssistantApp(root)
    root.mainloop()
